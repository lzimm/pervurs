#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from pervurs.server.www.templates.site import site
from pervurs.includes.urls import links

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0.1'
__CHEETAH_versionTuple__ = (2, 0, 1, 'final', 0)
__CHEETAH_genTime__ = 1244608040.475009
__CHEETAH_genTimestamp__ = 'Tue Jun  9 21:27:20 2009'
__CHEETAH_src__ = 'archive/index.tmpl'
__CHEETAH_srcLastModified__ = 'Sat May  9 12:52:30 2009'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class index(site):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        site.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def body(self, **KWS):



        ## CHEETAH: generated from #block body at line 4, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''
<div id="blog_posts_container">
\t<div id="blog_posts">

\t<h1><b></b><b></b><b></b><span>Archives</span></h1>

''')
        for post in VFFSL(SL,"req.posts",True): # generated from line 11, col 1
            write('''
\t<div class="blog_post" class="''')
            _v = VFFSL(SL,"post.marker",True) # '$post.marker' on line 13, col 32
            if _v is not None: write(_filter(_v, rawExpr='$post.marker')) # from line 13, col 32.
            write('''">
        <div class="blog_snapshot">
    \t    <div class="blog_image"><img src="''')
            _v = VFFSL(SL,"links",True)['attachment_index'](VFFSL(SL,"post",True)) # "$links['attachment_index']($post)" on line 15, col 44
            if _v is not None: write(_filter(_v, rawExpr="$links['attachment_index']($post)")) # from line 15, col 44.
            write('''"></div>
    \t    <div class="tl"></div><div class="tr"></div><div class="bl"></div><div class="br"></div>
\t    </div>
\t\t<div class="blog_title">
\t\t    <div class="blog_marker">''')
            _v = VFFSL(SL,"post.marker",True) # '$post.marker' on line 19, col 32
            if _v is not None: write(_filter(_v, rawExpr='$post.marker')) # from line 19, col 32.
            write('''</div>
\t\t\t<div class="blog_time">''')
            _v = VFN(VFFSL(SL,"post.posted",True),"strftime",False)("%B %d, %Y") # '$post.posted.strftime("%B %d, %Y")' on line 20, col 27
            if _v is not None: write(_filter(_v, rawExpr='$post.posted.strftime("%B %d, %Y")')) # from line 20, col 27.
            write('''</div>
\t\t    <h2><a href="''')
            _v = VFFSL(SL,"links",True)['post'](VFFSL(SL,"post",True)) # "$links['post']($post)" on line 21, col 20
            if _v is not None: write(_filter(_v, rawExpr="$links['post']($post)")) # from line 21, col 20.
            write('''">''')
            _v = VFFSL(SL,"post.title",True) # '$post.title' on line 21, col 43
            if _v is not None: write(_filter(_v, rawExpr='$post.title')) # from line 21, col 43.
            write('''</a></h2>
\t\t    <div class="blog_byline">''')
            _v = VFFSL(SL,"post.user.username",True) # '$post.user.username' on line 22, col 32
            if _v is not None: write(_filter(_v, rawExpr='$post.user.username')) # from line 22, col 32.
            write('''</div>
\t\t</div>
\t\t<div class="blog_preview">''')
            _v = VFFSL(SL,"post.span",True) # '$post.span' on line 24, col 29
            if _v is not None: write(_filter(_v, rawExpr='$post.span')) # from line 24, col 29.
            write('''</div>
\t</div>

''')
        write('''
''')
        self._handleCheetahInclude("../server/www/templates/widgets/pagination.tmpl", trans=trans, includeFrom="file", raw=False)
        write('''
\t</div>
\t<div class="tl"></div><div class="tr"></div><div class="bl"></div><div class="br"></div>
</div>

''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''
''')
        self.body(trans=trans)
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_index= 'writeBody'

## END CLASS DEFINITION

if not hasattr(index, '_initCheetahAttributes'):
    templateAPIClass = getattr(index, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(index)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=index()).run()


